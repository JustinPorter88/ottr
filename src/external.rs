use std::f64::consts::PI;

use faer::{col, Mat};
use itertools::Itertools;

use crate::{
    elements::beams::BeamSection,
    util::{quat_as_matrix, Quat},
};

pub fn parse_beamdyn_sections(file_data: &str) -> Vec<BeamSection> {
    let mut m = Mat::<f64>::zeros(3, 3);
    let mut q_rot = col![0., 0., 0., 0.];
    q_rot
        .as_mut()
        .quat_from_rotation_vector(col![0., -PI / 2., 0.].as_ref());
    quat_as_matrix(q_rot.as_ref(), m.as_mut());
    let mut m_rot = Mat::<f64>::zeros(6, 6);
    m_rot.submatrix_mut(0, 0, 3, 3).copy_from(&m);
    m_rot.submatrix_mut(3, 3, 3, 3).copy_from(&m);
    file_data
        .lines()
        .skip(10)
        .chunks(15)
        .into_iter()
        .map(|chunk| {
            let lines = chunk.collect_vec();
            let s = lines[0].parse::<f64>().unwrap();
            let c = (1..7)
                .map(|i| {
                    lines[i]
                        .split_ascii_whitespace()
                        .filter_map(|s| s.parse::<f64>().ok())
                        .collect_vec()
                })
                .collect_vec();
            let m = (8..14)
                .map(|i| {
                    lines[i]
                        .split_ascii_whitespace()
                        .filter_map(|s| s.parse::<f64>().ok())
                        .collect_vec()
                })
                .collect_vec();
            BeamSection {
                s,
                m_star: &m_rot * Mat::<f64>::from_fn(6, 6, |i, j| m[i][j]) * &m_rot.transpose(),
                c_star: &m_rot * Mat::<f64>::from_fn(6, 6, |i, j| c[i][j]) * &m_rot.transpose(),
            }
        })
        .collect_vec()
}

//------------------------------------------------------------------------------
// Testing
//------------------------------------------------------------------------------

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn test_parse_beamdyn_sections() {
        let sections = parse_beamdyn_sections(BD_INPUT);
        println!("{:?}", sections);
    }

    const BD_INPUT: &str =
        "------- BEAMDYN V1.00.* INDIVIDUAL BLADE INPUT FILE --------------------------
! NACA 0012 airfoil with chord 0.1 - Written using beamdyn.py 
---------------------- BLADE PARAMETERS --------------------------------------
   21  station_total    - Number of blade input stations (-)
    1  damp_type        - Damping type (switch): 0: no damping; 1: viscous damping
---------------------- DAMPING COEFFICIENT------------------------------------
   mu1        mu2        mu3        mu4        mu5        mu6
   (s)        (s)        (s)        (s)        (s)        (s)
 0.01 0.01 0.01 0.01 0.01 0.01 
---------------------- DISTRIBUTED PROPERTIES---------------------------------
0.000000
   6.804663E-18 0.000000E+00 0.000000E+00 0.000000E+00 0.000000E+00 -1.549113E-28
   0.000000E+00 5.440283E-18 0.000000E+00 0.000000E+00 0.000000E+00 6.234980E-20
   0.000000E+00 0.000000E+00 1.715755E+08 -8.494318E-11 -2.880672E+06 0.000000E+00
   0.000000E+00 0.000000E+00 -8.494318E-11 1.134880E+05 -5.616727E+04 0.000000E+00
   0.000000E+00 0.000000E+00 -2.880672E+06 -5.616727E+04 7.793935E+04 0.000000E+00
   -1.549113E-28 6.234980E-20 0.000000E+00 0.000000E+00 0.000000E+00 2.120621E+03

   6.413657E+00 0.000000E+00 0.000000E+00 0.000000E+00 0.000000E+00 3.175257E-18
   0.000000E+00 6.413657E+00 0.000000E+00 0.000000E+00 0.000000E+00 1.076823E-01
   0.000000E+00 0.000000E+00 6.413657E+00 -3.175257E-18 -1.076823E-01 0.000000E+00
   0.000000E+00 0.000000E+00 -3.175257E-18 6.776322E-09 5.331106E-20 0.000000E+00
   0.000000E+00 0.000000E+00 -1.076823E-01 5.331106E-20 1.808609E-03 0.000000E+00
   3.175257E-18 1.076823E-01 0.000000E+00 0.000000E+00 0.000000E+00 1.808616E-03

0.050000
   6.804663E-18 0.000000E+00 0.000000E+00 0.000000E+00 0.000000E+00 -1.549113E-28
   0.000000E+00 5.440283E-18 0.000000E+00 0.000000E+00 0.000000E+00 6.234980E-20
   0.000000E+00 0.000000E+00 1.715755E+08 -8.494318E-11 -2.880672E+06 0.000000E+00
   0.000000E+00 0.000000E+00 -8.494318E-11 1.134880E+05 -5.616727E+04 0.000000E+00
   0.000000E+00 0.000000E+00 -2.880672E+06 -5.616727E+04 7.793935E+04 0.000000E+00
   -1.549113E-28 6.234980E-20 0.000000E+00 0.000000E+00 0.000000E+00 2.120621E+03

   6.413657E+00 0.000000E+00 0.000000E+00 0.000000E+00 0.000000E+00 3.175257E-18
   0.000000E+00 6.413657E+00 0.000000E+00 0.000000E+00 0.000000E+00 1.076823E-01
   0.000000E+00 0.000000E+00 6.413657E+00 -3.175257E-18 -1.076823E-01 0.000000E+00
   0.000000E+00 0.000000E+00 -3.175257E-18 6.776322E-09 5.331106E-20 0.000000E+00
   0.000000E+00 0.000000E+00 -1.076823E-01 5.331106E-20 1.808609E-03 0.000000E+00
   3.175257E-18 1.076823E-01 0.000000E+00 0.000000E+00 0.000000E+00 1.808616E-03

0.100000
   6.804663E-18 0.000000E+00 0.000000E+00 0.000000E+00 0.000000E+00 -1.549113E-28
   0.000000E+00 5.440283E-18 0.000000E+00 0.000000E+00 0.000000E+00 6.234980E-20
   0.000000E+00 0.000000E+00 1.715755E+08 -8.494318E-11 -2.880672E+06 0.000000E+00
   0.000000E+00 0.000000E+00 -8.494318E-11 1.134880E+05 -5.616727E+04 0.000000E+00
   0.000000E+00 0.000000E+00 -2.880672E+06 -5.616727E+04 7.793935E+04 0.000000E+00
   -1.549113E-28 6.234980E-20 0.000000E+00 0.000000E+00 0.000000E+00 2.120621E+03

   6.413657E+00 0.000000E+00 0.000000E+00 0.000000E+00 0.000000E+00 3.175257E-18
   0.000000E+00 6.413657E+00 0.000000E+00 0.000000E+00 0.000000E+00 1.076823E-01
   0.000000E+00 0.000000E+00 6.413657E+00 -3.175257E-18 -1.076823E-01 0.000000E+00
   0.000000E+00 0.000000E+00 -3.175257E-18 6.776322E-09 5.331106E-20 0.000000E+00
   0.000000E+00 0.000000E+00 -1.076823E-01 5.331106E-20 1.808609E-03 0.000000E+00
   3.175257E-18 1.076823E-01 0.000000E+00 0.000000E+00 0.000000E+00 1.808616E-03";
}
